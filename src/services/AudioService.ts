
interface AudioConfig {
  startSoundPath: string;
  endSoundPath: string;
  defaultBeep: string;
}

class AudioService {
  private static instance: AudioService;
  private audioConfig: AudioConfig = {
    startSoundPath: '/assets/audio/go.mp3', // Updated path without src prefix
    endSoundPath: '/assets/audio/whistle.mp3', // Updated path without src prefix
    defaultBeep: 'data:audio/wav;base64,'
  };

  private constructor() {}

  public static getInstance(): AudioService {
    if (!AudioService.instance) {
      AudioService.instance = new AudioService();
    }
    return AudioService.instance;
  }

  public createAudio(type: 'start' | 'end'): HTMLAudioElement | undefined {
    try {
      const audio = new Audio();
      
      // Use base64 audio data for maximum compatibility
      if (type === 'start') {
        // Create a short "GO" beep
        audio.src = this.createCustomBeep(800, 0.3);
      } else {
        // Create a whistle-like ending sound (higher pitch, longer duration)
        audio.src = this.createCustomBeep(1200, 0.5);
      }
      
      console.log(`Creating audio for ${type} sound using generated audio`);
      
      // Preload the audio
      audio.preload = "auto";
      
      return audio;
    } catch (error) {
      console.error('Error creating audio:', error);
      return undefined;
    }
  }

  public createBeep(): HTMLAudioElement | undefined {
    try {
      const audio = new Audio();
      audio.preload = 'auto';
      audio.src = this.audioConfig.defaultBeep;
      return audio;
    } catch (error) {
      console.error('Error creating beep audio:', error);
      return undefined;
    }
  }

  // Create a Web Audio API beep sound and convert it to a data URL
  private createCustomBeep(frequency: number = 800, duration: number = 0.3): string {
    try {
      // Create a temporary audio context
      const audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();
      
      // Create buffer for the specified duration at the sampling rate
      const sampleRate = audioContext.sampleRate;
      const frameCount = duration * sampleRate;
      const audioBuffer = audioContext.createBuffer(1, frameCount, sampleRate);
      
      // Fill the buffer with a simple sine wave
      const data = audioBuffer.getChannelData(0);
      for (let i = 0; i < frameCount; i++) {
        // Simple envelope to avoid clicks (fade in and fade out)
        let envelope = 1;
        if (i < 0.1 * frameCount) {
          envelope = i / (0.1 * frameCount); // Fade in
        } else if (i > 0.9 * frameCount) {
          envelope = (frameCount - i) / (0.1 * frameCount); // Fade out
        }
        
        data[i] = Math.sin(2 * Math.PI * frequency * i / sampleRate) * envelope * 0.5;
      }
      
      // Convert the buffer to a WAV file
      const waveData = this.audioBufferToWav(audioBuffer);
      
      // Convert to base64 for use as a data URL
      const base64 = btoa(
        Array.from(new Uint8Array(waveData))
          .map(val => String.fromCharCode(val))
          .join('')
      );
      
      return `data:audio/wav;base64,${base64}`;
    } catch (error) {
      console.error('Error creating custom beep:', error);
      return this.audioConfig.defaultBeep;
    }
  }

  // Convert an audio buffer to a WAV format array buffer
  private audioBufferToWav(audioBuffer: AudioBuffer): ArrayBuffer {
    // Format parameters
    const numChannels = audioBuffer.numberOfChannels;
    const sampleRate = audioBuffer.sampleRate;
    const format = 1; // PCM
    const bitDepth = 16; 
    
    // Extract the audio data
    const channelData = [];
    for (let channel = 0; channel < numChannels; channel++) {
      channelData.push(audioBuffer.getChannelData(channel));
    }
    
    // Calculate sizes
    const bytesPerSample = bitDepth / 8;
    const blockAlign = numChannels * bytesPerSample;
    
    // Create the buffer
    const buffer = new ArrayBuffer(44 + audioBuffer.length * blockAlign);
    const view = new DataView(buffer);
    
    // Write the WAV header
    const writeString = (offset: number, string: string) => {
      for (let i = 0; i < string.length; i++) {
        view.setUint8(offset + i, string.charCodeAt(i));
      }
    };
    
    writeString(0, 'RIFF'); // ChunkID
    view.setUint32(4, 36 + audioBuffer.length * blockAlign, true); // ChunkSize
    writeString(8, 'WAVE'); // Format
    writeString(12, 'fmt '); // Subchunk1ID
    view.setUint32(16, 16, true); // Subchunk1Size
    view.setUint16(20, format, true); // AudioFormat
    view.setUint16(22, numChannels, true); // NumChannels
    view.setUint32(24, sampleRate, true); // SampleRate
    view.setUint32(28, sampleRate * blockAlign, true); // ByteRate
    view.setUint16(32, blockAlign, true); // BlockAlign
    view.setUint16(34, bitDepth, true); // BitsPerSample
    writeString(36, 'data'); // Subchunk2ID
    view.setUint32(40, audioBuffer.length * blockAlign, true); // Subchunk2Size
    
    // Write the audio data
    const offset = 44;
    let dataIndex = 0;
    
    for (let i = 0; i < audioBuffer.length; i++) {
      for (let channel = 0; channel < numChannels; channel++) {
        const sample = Math.max(-1, Math.min(1, channelData[channel][i]));
        const value = sample < 0 ? sample * 0x8000 : sample * 0x7FFF;
        view.setInt16(offset + dataIndex, value, true);
        dataIndex += bytesPerSample;
      }
    }
    
    return buffer;
  }
}

export default AudioService;
